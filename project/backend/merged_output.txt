File Name: camera_manager.py

import cv2
import threading
import queue

class CameraManager:
    def __init__(self):
        self.active_camera = 2  # Permanently set to Camera 2
        self.frame_queue = queue.Queue(maxsize=1)
        self.running = False
        self.thread = None
        self.cap = None

    def start_stream(self):
        if self.thread and self.thread.is_alive():
            self.stop_stream()
        
        self.running = True
        self.thread = threading.Thread(target=self._capture_frames, daemon=True)
        self.thread.start()

    def stop_stream(self):
        self.running = False
        if self.thread:
            self.thread.join()
        if self.cap and self.cap.isOpened():
            self.cap.release()

    def _capture_frames(self):
        self.cap = cv2.VideoCapture(self.active_camera)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        
        while self.running:
            ret, frame = self.cap.read()
            if not ret:
                self.cap.release()
                self.cap = cv2.VideoCapture(self.active_camera)  # Reconnect
                continue
                
            if not self.frame_queue.empty():
                self.frame_queue.get_nowait()
            self.frame_queue.put(frame)

# Create a global instance
camera_manager = CameraManager()


File Name: config.py

# Configuration settings

# Thresholds for object detection
DETECTION_THRESHOLDS = {
    # Road hazard model thresholds (yolov12.pt)
    "class_0": 0.35,  # Pothole
    "class_1": 0.60,  # Speedbump
    
    # Standard object detection thresholds (yolov8n.pt)
    "person": 0.50,   # Person
    "dog": 0.50,      # Dog
    "cow": 0.50       # Cow
}

# Default camera index
DEFAULT_CAMERA = 2

# Distance estimation parameters
DISTANCE_ESTIMATION = {
    "focal_length": 1000,  # Approximate focal length in pixels
    "known_width": {
        "person": 0.5,     # Average width of a person in meters
        "dog": 0.4,        # Average width of a dog in meters
        "cow": 0.8         # Average width of a cow in meters
    }
}


File Name: distance_estimator.py

import numpy as np
import cv2

class DistanceEstimator:
    def __init__(self, camera_params=None):
        # Default camera parameters if not provided
        self.camera_params = camera_params or {
            'focal_length': 1000,  # Approximate focal length in pixels
            'known_width': {
                'person': 0.5,     # Average width of a person in meters
                'dog': 0.4,        # Average width of a dog in meters
                'cow': 0.8         # Average width of a cow in meters
            }
        }
    
    def estimate_distance(self, object_class, bbox_width, frame_width):
        """
        Estimate distance using the apparent size method
        
        Args:
            object_class: Class of the detected object (e.g., 'person', 'dog', 'cow')
            bbox_width: Width of the bounding box in pixels
            frame_width: Width of the frame in pixels
            
        Returns:
            Estimated distance in meters
        """
        # Get the known width for this object class
        if object_class in self.camera_params['known_width']:
            known_width = self.camera_params['known_width'][object_class]
        else:
            # Default to person if class not found
            known_width = self.camera_params['known_width']['person']
        
        # Calculate distance using the formula: distance = (known_width * focal_length) / bbox_width
        distance = (known_width * self.camera_params['focal_length']) / bbox_width
        
        return distance

File Name: main.py

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pathlib import Path
import uvicorn

from camera_manager import camera_manager
from websocket_server import websocket_endpoint
from model_loader import road_model, standard_model  # Updated import
from notification_service import router as notification_router

app = FastAPI()

# API Routes
app.include_router(notification_router, prefix="/api")

# WebSocket Route
app.websocket("/ws")(websocket_endpoint)

# Static Files and SPA Fallback
frontend_dist = Path(__file__).parent.parent / "frontend" / "dist"
if frontend_dist.exists():
    app.mount("/assets", StaticFiles(directory=str(frontend_dist / "assets")), name="assets")
    
    @app.get("/{filename}")
    async def get_file(filename: str):
        file_path = frontend_dist / filename
        if file_path.is_file():
            return FileResponse(str(file_path))
        return FileResponse(str(frontend_dist / "index.html"))
    
    @app.get("/{full_path:path}")
    async def serve_spa():
        return FileResponse(str(frontend_dist / "index.html"))

# Start Camera Stream (Fixed to Camera 2)
camera_manager.start_stream()

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)


File Name: merged_output.txt



File Name: model_loader.py

from ultralytics import YOLO

# Load both YOLO models
def load_models():
    try:
        # Load custom model for road hazards (potholes and speedbumps)
        road_hazard_model = YOLO("yolov12.pt")
        print("Custom road hazard model (yolov12.pt) loaded successfully")
        
        # Load standard YOLOv8n model for general objects
        standard_model = YOLO("yolov8n.pt")
        print("YOLOv8n model loaded successfully")
        
        return road_hazard_model, standard_model
    except Exception as e:
        print(f"Error loading YOLO models: {str(e)}")
        raise

# Load both models
road_model, standard_model = load_models()


File Name: notification_service.py

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from pymongo import MongoClient
from fastapi import APIRouter, HTTPException, Body
from pydantic import BaseModel
from typing import Dict, Any, Optional
from dotenv import load_dotenv
import asyncio

# Load environment variables
load_dotenv()

# MongoDB connection
mongo_client = MongoClient(os.getenv("MONGODB_URI", "mongodb://localhost:27017"))
db = mongo_client["road_hazards"]
hazard_reports = db["hazard_reports"]

# Email configuration
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USER = os.getenv("EMAIL_USER", "")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD", "")
AUTHORITY_EMAIL = os.getenv("AUTHORITY_EMAIL", "local.authority@example.com")

# Create router
router = APIRouter()

# Update the model at the top of the file
class HazardNotification(BaseModel):
    location: Dict[str, float]
    timestamp: datetime
    type: str
    severity: str
    image_url: Optional[str] = None
    hazard_count: Optional[int] = 1

# Modify the send_email_to_authority function to be asynchronous
async def send_email_to_authority(notification, report_id, nearby_count):
    """Send email notification to the authority about a hazard"""
    try:
        # Create a background task for sending the email
        asyncio.create_task(_send_email_async(notification, report_id, nearby_count))
        return True
    except Exception as e:
        print(f"Error scheduling email: {str(e)}")
        return False

# Create a new function that actually sends the email
async def _send_email_async(notification, report_id, nearby_count):
    """Asynchronously send email notification to the authority"""
    try:
        # Load environment variables
        load_dotenv()
        
        # Email configuration
        email_host = os.getenv("EMAIL_HOST")
        email_port = int(os.getenv("EMAIL_PORT", "587"))
        email_user = os.getenv("EMAIL_USER")
        email_password = os.getenv("EMAIL_PASSWORD")
        authority_email = os.getenv("AUTHORITY_EMAIL")
        sender_email = os.getenv("SENDER_EMAIL")
        
        # Create message
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = authority_email
        msg['Subject'] = f"Road Hazard Alert: {notification.type.capitalize()} Detected"
        
        # Email body
        body = f"""
        <html>
        <body>
            <h2>Road Hazard Alert</h2>
            <p><strong>Type:</strong> {notification.type.capitalize()}</p>
            <p><strong>Severity:</strong> {notification.severity}</p>
            <p><strong>Location:</strong> Lat: {notification.location['lat']}, Lng: {notification.location['lng']}</p>
            <p><strong>Time Detected:</strong> {notification.timestamp}</p>
            <p><strong>Report ID:</strong> {report_id}</p>
            <p><strong>Nearby Reports:</strong> {nearby_count} similar hazards reported in this area in the last 30 days</p>
            <p>Please take appropriate action to address this road hazard.</p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(body, 'html'))
        
        # Add image if available
        if notification.image_url:
            img_data = requests.get(notification.image_url).content
            image = MIMEImage(img_data)
            image.add_header('Content-ID', '<image1>')
            msg.attach(image)
        
        # Connect to server and send email
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, lambda: _send_smtp_email(
            email_host, email_port, email_user, email_password, 
            sender_email, authority_email, msg.as_string()
        ))
        
        print(f"Email notification sent for hazard report {report_id}")
        return True
    except Exception as e:
        print(f"Failed to send email notification: {str(e)}")
        return False

def _send_smtp_email(host, port, user, password, sender, recipient, message):
    """Send email via SMTP - runs in executor to avoid blocking"""
    with smtplib.SMTP(host, port) as server:
        server.starttls()
        server.login(user, password)
        server.sendmail(sender, recipient, message)

# Modify the send_hazard_notification endpoint to use the async email function
@router.post("/hazard-notification")
async def send_hazard_notification(notification: HazardNotification = Body(...)):
    try:
        # Only process pothole notifications (class 0)
        if notification.type.lower() != "pothole":
            return {"success": False, "message": "Only pothole hazards are reported to authorities"}
            
        # Check if we've already reported a hazard at this location
        # Using approximately 100 meter radius (0.001 degrees ≈ 111 meters)
        existing_report = hazard_reports.find_one({
            "location.lat": {"$gte": notification.location["lat"] - 0.001, "$lte": notification.location["lat"] + 0.001},
            "location.lng": {"$gte": notification.location["lng"] - 0.001, "$lte": notification.location["lng"] + 0.001},
        })
        
        # Count nearby hazards in a slightly larger area (500m radius)
        nearby_count = hazard_reports.count_documents({
            "location.lat": {"$gte": notification.location["lat"] - 0.005, "$lte": notification.location["lat"] + 0.005},
            "location.lng": {"$gte": notification.location["lng"] - 0.005, "$lte": notification.location["lng"] + 0.005},
            "timestamp": {"$gte": datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=30)}
        })
        
        if existing_report:
            # If the report is less than 7 days old, don't send a new notification
            report_time = existing_report.get("timestamp", datetime.min)
            if isinstance(report_time, str):
                report_time = datetime.fromisoformat(report_time.replace('Z', '+00:00'))
            
            days_difference = (datetime.now() - report_time).days
            if days_difference < 7:
                return {"success": False, "message": "Recent report exists for this location"}
        
        # Store in MongoDB
        report_id = hazard_reports.insert_one({
            "location": notification.location,
            "timestamp": notification.timestamp,
            "type": notification.type,
            "severity": notification.severity,
            "image_url": notification.image_url,
            "status": "reported",
            "hazard_count": notification.hazard_count if hasattr(notification, 'hazard_count') else 1
        }).inserted_id
        
        # Send email notification with nearby count - now async
        await send_email_to_authority(notification, str(report_id), nearby_count)
        
        return {"success": True, "report_id": str(report_id)}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to process notification: {str(e)}")

@router.get("/hazard-reports")
async def get_hazard_reports():
    """Get all hazard reports from the database"""
    try:
        # Fetch all reports, sort by timestamp descending (newest first)
        reports = list(hazard_reports.find({}, {'_id': 0}).sort('timestamp', -1))
        
        # Convert ObjectId to string for JSON serialization
        for report in reports:
            if '_id' in report:
                report['_id'] = str(report['_id'])
            
            # Ensure timestamp is serializable
            if 'timestamp' in report and isinstance(report['timestamp'], datetime):
                report['timestamp'] = report['timestamp'].isoformat()
        
        return reports
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to fetch hazard reports: {str(e)}")

@router.delete("/cleanup-resolved-hazards")
async def cleanup_resolved_hazards():
    """Remove hazard reports that are older than 7 days and have no recent reports in the same location"""
    try:
        # Get the cutoff date (7 days ago)
        cutoff_date = datetime.now() - timedelta(days=7)
        
        # Find all reports older than 7 days
        old_reports = list(hazard_reports.find({
            "timestamp": {"$lt": cutoff_date}
        }))
        
        removed_count = 0
        
        for report in old_reports:
            # For each old report, check if there's a newer report within 100m
            has_newer_report = hazard_reports.find_one({
                "location.lat": {"$gte": report["location"]["lat"] - 0.001, "$lte": report["location"]["lat"] + 0.001},
                "location.lng": {"$gte": report["location"]["lng"] - 0.001, "$lte": report["location"]["lng"] + 0.001},
                "timestamp": {"$gte": cutoff_date}
            })
            
            # If no newer report exists, remove this old report
            if not has_newer_report:
                hazard_reports.delete_one({"_id": report["_id"]})
                removed_count += 1
        
        return {
            "success": True, 
            "message": f"Removed {removed_count} resolved hazards",
            "removed_count": removed_count
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to cleanup resolved hazards: {str(e)}")

# Also add a specific endpoint to delete a single hazard by ID
@router.delete("/hazard-reports/{report_id}")
async def delete_hazard_report(report_id: str):
    """Delete a specific hazard report by ID"""
    try:
        from bson.objectid import ObjectId
        
        # Convert string ID to MongoDB ObjectId
        result = hazard_reports.delete_one({"_id": ObjectId(report_id)})
        
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail=f"Hazard report with ID {report_id} not found")
        
        return {"success": True, "message": f"Hazard report {report_id} deleted successfully"}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete hazard report: {str(e)}")

File Name: websocket_server.py

import asyncio
import cv2
import torch
import numpy as np
from fastapi import WebSocket, WebSocketDisconnect
from camera_manager import camera_manager
from model_loader import road_model, standard_model
from config import DETECTION_THRESHOLDS  # Import the thresholds from config
from distance_estimator import DistanceEstimator

async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            # Process backend camera frame if available
            if not camera_manager.frame_queue.empty():
                frame = camera_manager.frame_queue.get()
                
                # Process the frame with both YOLO models
                results, driver_lane_hazard_count, vis_frame, hazard_distances = process_frame_with_models(frame)
                
                # Send processed frame and results
                _, jpeg = cv2.imencode('.jpg', vis_frame, [cv2.IMWRITE_JPEG_QUALITY, 80])
                await websocket.send_bytes(jpeg.tobytes())
                
                # Send both total and driver lane hazard counts
                total_hazard_count = len(results)
                await websocket.send_json({
                    "hazard_count": total_hazard_count,
                    "driver_lane_hazard_count": driver_lane_hazard_count,
                    "hazard_distances": hazard_distances
                })
            
            await asyncio.sleep(0.033)
            
    except WebSocketDisconnect:
        print("Client disconnected")
    except Exception as e:
        print(f"Error: {str(e)}")

# Initialize the distance estimator
distance_estimator = DistanceEstimator()

def process_frame_with_models(frame):
    """Process a frame with both YOLO models and apply filtering"""
    # Get frame dimensions
    frame_height, frame_width = frame.shape[:2]
    
    # Calculate lane boundaries (middle 50%)
    left_boundary = int(frame_width * 0.25)
    right_boundary = int(frame_width * 0.75)
    
    # Process with road hazard model (potholes and speedbumps)
    road_results = road_model.predict(
        frame,
        imgsz=640,
        device="cuda" if torch.cuda.is_available() else "cpu",
        half=torch.cuda.is_available(),
        verbose=False
    )
    
    # Process with standard model (people, animals, vehicles)
    standard_results = standard_model.predict(
        frame,
        imgsz=640,
        device="cuda" if torch.cuda.is_available() else "cpu",
        half=torch.cuda.is_available(),
        verbose=False
    )

    # Apply threshold filtering using values from config
    filtered_road_results = []
    filtered_standard_results = []
    driver_lane_hazards = []  # Hazards in the middle 50% (driver's lane)
    hazard_distances = []  # Store distances of detected hazards
    all_filtered_results = []
    
    # Process road hazards (potholes, speedbumps)
    if len(road_results[0].boxes.data) > 0:
        for r in road_results[0].boxes.data:
            x1, y1, x2, y2, conf, cls = r.tolist()
            cls_int = int(cls)
            threshold_key = f"class_{cls_int}"
            
            # Get class name from road hazard model
            class_name = road_model.names[cls_int] if cls_int in road_model.names else f"class_{cls_int}"
            
            if threshold_key in DETECTION_THRESHOLDS and conf >= DETECTION_THRESHOLDS[threshold_key]:
                filtered_road_results.append(r.unsqueeze(0))
                all_filtered_results.append({
                    'box': [x1, y1, x2, y2],
                    'conf': conf,
                    'cls': cls_int,
                    'class_name': class_name,
                    'model': 'road',
                    'type': class_name  # Add the type explicitly
                })
                
                # Check if hazard is in driver's lane (middle 50%)
                box_center_x = (x1 + x2) / 2
                if left_boundary <= box_center_x <= right_boundary:
                    driver_lane_hazards.append(r.unsqueeze(0))
    
    # Process standard objects (people, animals, vehicles)
    if len(standard_results[0].boxes.data) > 0:
        for r in standard_results[0].boxes.data:
            x1, y1, x2, y2, conf, cls = r.tolist()
            cls_int = int(cls)
            
            # Get class name from standard model
            class_name = standard_model.names[cls_int] if cls_int in standard_model.names else f"class_{cls_int}"
            
            # Only process people, dogs, and cows with confidence > 0.5
            if class_name in ['person', 'dog', 'cow'] and conf >= 0.5:
                filtered_standard_results.append(r.unsqueeze(0))
                all_filtered_results.append({
                    'box': [x1, y1, x2, y2],
                    'conf': conf,
                    'cls': cls_int,
                    'class_name': class_name,
                    'model': 'standard'
                })
                
                # Inside process_frame_with_models function, modify the hazard_distances creation:
                # Calculate distance for people, dogs, and cows
                bbox_width = x2 - x1
                distance = distance_estimator.estimate_distance(class_name, bbox_width, frame_width)
                
                # Check if hazard is in driver's lane (middle 50%)
                box_center_x = (x1 + x2) / 2
                is_in_driver_lane = left_boundary <= box_center_x <= right_boundary
                
                hazard_distances.append({
                    'class': class_name,
                    'distance': distance,
                    'bbox': [x1, y1, x2, y2],
                    'inDriverLane': is_in_driver_lane
                })
                
                # Check if hazard is in driver's lane (middle 50%)
                box_center_x = (x1 + x2) / 2
                if left_boundary <= box_center_x <= right_boundary:
                    driver_lane_hazards.append(r.unsqueeze(0))
    
    # Update road model results
    if filtered_road_results:
        road_results[0].boxes.data = torch.cat(filtered_road_results, dim=0)
    else:
        road_results[0].boxes.data = torch.empty((0, 6))
    
    # Update standard model results
    if filtered_standard_results:
        standard_results[0].boxes.data = torch.cat(filtered_standard_results, dim=0)
    else:
        standard_results[0].boxes.data = torch.empty((0, 6))
    
    # Count hazards in driver's lane
    driver_lane_hazard_count = len(driver_lane_hazards)
    
    # Create a copy of the original frame for visualization
    vis_frame = frame.copy()
    
    # Draw all detections on the visualization frame
    for result in all_filtered_results:
        x1, y1, x2, y2 = result['box']
        class_name = result['class_name']
        
        # Different colors for different types of objects
        if result['model'] == 'road':
            color = (0, 165, 255)  # Orange for road hazards (BGR format)
        else:
            color = (255, 0, 0)  # Blue for standard objects
        
        # Draw bounding box
        cv2.rectangle(vis_frame, (int(x1), int(y1)), (int(x2), int(y2)), color, 2)
        
        # Draw label without confidence
        label = f"{class_name}"
        cv2.putText(vis_frame, label, (int(x1), int(y1) - 10), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    
    # Add distance information to the visualization for standard objects
    for hazard in hazard_distances:
        x1, y1, x2, y2 = hazard['bbox']
        cv2.putText(
            vis_frame, 
            f"{hazard['distance']:.1f}m", 
            (int(x1), int(y1) - 30), 
            cv2.FONT_HERSHEY_SIMPLEX, 
            0.5, 
            (0, 255, 0), 
            2
        )
    
    return all_filtered_results, driver_lane_hazard_count, vis_frame, hazard_distances

